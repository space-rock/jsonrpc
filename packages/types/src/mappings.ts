/**
 * This file was auto-generated by a script.
 * Do not make direct changes to the file.
 */
import type {
  JsonRpcRequestForExperimentalChanges,
  JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError,
  JsonRpcRequestForExperimentalChangesInBlock,
  JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError,
  JsonRpcRequestForExperimentalCongestionLevel,
  JsonRpcResponseForRpcCongestionLevelResponseAndRpcError,
  JsonRpcRequestForExperimentalGenesisConfig,
  JsonRpcResponseForGenesisConfigAndRpcError,
  JsonRpcRequestForExperimentalLightClientBlockProof,
  JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError,
  JsonRpcRequestForExperimentalLightClientProof,
  JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError,
  JsonRpcRequestForExperimentalMaintenanceWindows,
  JsonRpcResponseForArrayOfRangeOfUint64AndRpcError,
  JsonRpcRequestForExperimentalProtocolConfig,
  JsonRpcResponseForRpcProtocolConfigResponseAndRpcError,
  JsonRpcRequestForExperimentalReceipt,
  JsonRpcResponseForRpcReceiptResponseAndRpcError,
  JsonRpcRequestForExperimentalSplitStorageInfo,
  JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError,
  JsonRpcRequestForExperimentalTxStatus,
  JsonRpcResponseForRpcTransactionResponseAndRpcError,
  JsonRpcRequestForExperimentalValidatorsOrdered,
  JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError,
  JsonRpcRequestForBlock,
  JsonRpcResponseForRpcBlockResponseAndRpcError,
  JsonRpcRequestForBlockEffects,
  JsonRpcRequestForBroadcastTxAsync,
  JsonRpcResponseForCryptoHashAndRpcError,
  JsonRpcRequestForBroadcastTxCommit,
  JsonRpcRequestForChanges,
  JsonRpcRequestForChunk,
  JsonRpcResponseForRpcChunkResponseAndRpcError,
  JsonRpcRequestForClientConfig,
  JsonRpcResponseForRpcClientConfigResponseAndRpcError,
  JsonRpcRequestForGasPrice,
  JsonRpcResponseForRpcGasPriceResponseAndRpcError,
  JsonRpcRequestForGenesisConfig,
  JsonRpcRequestForHealth,
  JsonRpcResponseForNullableRpcHealthResponseAndRpcError,
  JsonRpcRequestForLightClientProof,
  JsonRpcRequestForMaintenanceWindows,
  JsonRpcRequestForNetworkInfo,
  JsonRpcResponseForRpcNetworkInfoResponseAndRpcError,
  JsonRpcRequestForNextLightClientBlock,
  JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError,
  JsonRpcRequestForQuery,
  JsonRpcResponseForRpcQueryResponseAndRpcError,
  JsonRpcRequestForSendTx,
  JsonRpcRequestForStatus,
  JsonRpcResponseForRpcStatusResponseAndRpcError,
  JsonRpcRequestForTx,
  JsonRpcRequestForValidators,
  JsonRpcResponseForRpcValidatorResponseAndRpcError,
} from './types';

export type MethodMap = {
  block: {
    request: JsonRpcRequestForBlock;
    response: JsonRpcResponseForRpcBlockResponseAndRpcError;
  };
  block_effects: {
    request: JsonRpcRequestForBlockEffects;
    response: JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError;
  };
  broadcast_tx_async: {
    request: JsonRpcRequestForBroadcastTxAsync;
    response: JsonRpcResponseForCryptoHashAndRpcError;
  };
  broadcast_tx_commit: {
    request: JsonRpcRequestForBroadcastTxCommit;
    response: JsonRpcResponseForRpcTransactionResponseAndRpcError;
  };
  changes: {
    request: JsonRpcRequestForChanges;
    response: JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError;
  };
  chunk: {
    request: JsonRpcRequestForChunk;
    response: JsonRpcResponseForRpcChunkResponseAndRpcError;
  };
  client_config: {
    request: JsonRpcRequestForClientConfig;
    response: JsonRpcResponseForRpcClientConfigResponseAndRpcError;
  };
  EXPERIMENTAL_changes: {
    request: JsonRpcRequestForExperimentalChanges;
    response: JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError;
  };
  EXPERIMENTAL_changes_in_block: {
    request: JsonRpcRequestForExperimentalChangesInBlock;
    response: JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError;
  };
  EXPERIMENTAL_congestion_level: {
    request: JsonRpcRequestForExperimentalCongestionLevel;
    response: JsonRpcResponseForRpcCongestionLevelResponseAndRpcError;
  };
  EXPERIMENTAL_genesis_config: {
    request: JsonRpcRequestForExperimentalGenesisConfig;
    response: JsonRpcResponseForGenesisConfigAndRpcError;
  };
  EXPERIMENTAL_light_client_block_proof: {
    request: JsonRpcRequestForExperimentalLightClientBlockProof;
    response: JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError;
  };
  EXPERIMENTAL_light_client_proof: {
    request: JsonRpcRequestForExperimentalLightClientProof;
    response: JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError;
  };
  EXPERIMENTAL_maintenance_windows: {
    request: JsonRpcRequestForExperimentalMaintenanceWindows;
    response: JsonRpcResponseForArrayOfRangeOfUint64AndRpcError;
  };
  EXPERIMENTAL_protocol_config: {
    request: JsonRpcRequestForExperimentalProtocolConfig;
    response: JsonRpcResponseForRpcProtocolConfigResponseAndRpcError;
  };
  EXPERIMENTAL_receipt: {
    request: JsonRpcRequestForExperimentalReceipt;
    response: JsonRpcResponseForRpcReceiptResponseAndRpcError;
  };
  EXPERIMENTAL_split_storage_info: {
    request: JsonRpcRequestForExperimentalSplitStorageInfo;
    response: JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError;
  };
  EXPERIMENTAL_tx_status: {
    request: JsonRpcRequestForExperimentalTxStatus;
    response: JsonRpcResponseForRpcTransactionResponseAndRpcError;
  };
  EXPERIMENTAL_validators_ordered: {
    request: JsonRpcRequestForExperimentalValidatorsOrdered;
    response: JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError;
  };
  gas_price: {
    request: JsonRpcRequestForGasPrice;
    response: JsonRpcResponseForRpcGasPriceResponseAndRpcError;
  };
  genesis_config: {
    request: JsonRpcRequestForGenesisConfig;
    response: JsonRpcResponseForGenesisConfigAndRpcError;
  };
  health: {
    request: JsonRpcRequestForHealth;
    response: JsonRpcResponseForNullableRpcHealthResponseAndRpcError;
  };
  light_client_proof: {
    request: JsonRpcRequestForLightClientProof;
    response: JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError;
  };
  maintenance_windows: {
    request: JsonRpcRequestForMaintenanceWindows;
    response: JsonRpcResponseForArrayOfRangeOfUint64AndRpcError;
  };
  network_info: {
    request: JsonRpcRequestForNetworkInfo;
    response: JsonRpcResponseForRpcNetworkInfoResponseAndRpcError;
  };
  next_light_client_block: {
    request: JsonRpcRequestForNextLightClientBlock;
    response: JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError;
  };
  query: {
    request: JsonRpcRequestForQuery;
    response: JsonRpcResponseForRpcQueryResponseAndRpcError;
  };
  send_tx: {
    request: JsonRpcRequestForSendTx;
    response: JsonRpcResponseForRpcTransactionResponseAndRpcError;
  };
  status: {
    request: JsonRpcRequestForStatus;
    response: JsonRpcResponseForRpcStatusResponseAndRpcError;
  };
  tx: {
    request: JsonRpcRequestForTx;
    response: JsonRpcResponseForRpcTransactionResponseAndRpcError;
  };
  validators: {
    request: JsonRpcRequestForValidators;
    response: JsonRpcResponseForRpcValidatorResponseAndRpcError;
  };
};
export type RpcMethod = keyof MethodMap;
export type ApiRequest<M extends RpcMethod> = MethodMap[M]['request'];
export type ApiParams<M extends RpcMethod> = MethodMap[M]['request']['params'];
export type ApiResponse<M extends RpcMethod> = MethodMap[M]['response'];
